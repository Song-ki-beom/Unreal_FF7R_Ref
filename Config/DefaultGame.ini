#include <vector>
#include <iostream>
using namespace std;

typedef long long ll;
typedef pair<ll, ll> nod;

const ll N = 1000000;
nod Qu[N];
vector<ll> graph[N];
vector<ll> tree(N * 4);
vector<ll> tree1(N * 4);
ll cnf = 0;


void dfs(ll n, ll v)
{

    Qu[n].first = ++cnf;
    for (ll p : graph[n])
    {
        if (p == v) continue;
        dfs(p, n);
    }
    Qu[n].second = cnf;

}


void propagate(ll n, ll s, ll e)
{
    if (tree1[n])
    {
        if (s != e) 
        {
            tree1[n * 2] += tree1[n];
            tree1[n * 2 + 1] += tree1[n];
        }

    }
    tree[n] += tree1[n] * (e - s + 1);
    tree1[n] = 0;
}

void change(ll n, ll s, ll e, ll s1, ll e1, ll num)
{
    propagate(n, s, e);
    if (s1 <= s && e <= e1) { tree1[n] += num; propagate(n, s, e); return; }
    if (e1 < s || e < s1) return;

    ll mid = (s + e) / 2;
    change(n * 2, s, mid, s1, e1, num);
    change(n * 2 + 1, mid + 1, e, s1, e1, num);
    tree[n] = tree[n * 2] + tree[n * 2 + 1];
    return;
}

ll findSeg(ll n, ll s, ll e, ll s1, ll e1)
{
    propagate(n, s, e);
    if (e < s1 || s > e1) return 0;
    if (s1 <= s  && e <= e1) return tree[n];
    ll mid = (s + e) / 2;
    return findSeg(n * 2, s, mid, s1,e1) + findSeg(n * 2 + 1, mid + 1,e, s1,e1);

}

ll seg(ll n, ll s, ll e)
{
    if (e == s) return tree[n] = 0;
    ll mid = (s + e) / 2;
    return tree[n] = seg(n * 2, s, mid) + seg(n * 2 + 1, mid + 1, e);
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    ll n, m, temp, a, b, c;
    cin >> n >> m;

    cin >> temp; 
    for (int i = 2; i <= n; i++)
    {
        cin >> temp;
        graph[temp].push_back(i);
    };
    dfs(1, 0);
    seg(1, 1, n);
    for (int j = 1; j <= m; j++)
    {
        cin >> a;
        if (a == 1)
        {
            cin >> b >> c;
            change(1, 1, n, Qu[b].first, Qu[b].second, c);
        }
        else if (a == 2)
        {
            cin >> b;
            cout << findSeg(1, 1, n, Qu[b].first, Qu[b].second) << "\n";
        }
    }


}